//
//  EditorViewModel.swift
//  Gifchan
//
//  Created by Ivan Kisilov on 07.03.2025.
//

@preconcurrency import SwiftUI
import AVFoundation
import UniformTypeIdentifiers

@MainActor
class EditorViewModel: ObservableObject {
    @Published var selectedFileURL: URL? {
        didSet {
            handleSelectedFile()
        }
    }
    @Published var gifURL: URL?
    @Published var isProcessing = false
    @Published var showLoader = false

    private func handleSelectedFile() {
        guard let fileURL = selectedFileURL else { return }

        DispatchQueue.main.async {
            self.gifURL = nil
            self.isProcessing = true
            self.showLoader = true
        }

        Task {
            await convertVideoToGIF(videoURL: fileURL)
        }
    }

    func convertVideoToGIF(videoURL: URL) async {
        let tempGifURL = FileManager.default.temporaryDirectory.appendingPathComponent("converted.gif")
        let asset = AVURLAsset(url: videoURL)
        
        guard let track = asset.tracks(withMediaType: .video).first else {
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–µ–∫ –≤—ñ–¥–µ–æ")
            return
        }

        let originalFPS = track.nominalFrameRate
        let videoSize = track.naturalSize.applying(track.preferredTransform) // ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –≤—ñ–¥–µ–æ
        var duration = asset.duration.seconds
        let optimizedFPS: Float = min(originalFPS, 20) // üî• –û–±–º–µ–∂—É—î–º–æ FPS –¥–æ 20

        if duration > 10 {
            print("‚ö†Ô∏è –í—ñ–¥–µ–æ –¥–æ–≤—à–µ 10 —Å–µ–∫—É–Ω–¥, –æ–±—Ä—ñ–∑–∞—î–º–æ...")
            duration = 10
        }

        let stepTime = 1.0 / Double(optimizedFPS)
        let totalFrames = Int(duration * Double(optimizedFPS))
        var timeValues: [NSValue] = []
        var currentTime: Double = 0.0

        while currentTime < duration {
            let time = CMTime(seconds: currentTime, preferredTimescale: 600)
            timeValues.append(NSValue(time: time))
            currentTime += stepTime
        }

        let generator = AVAssetImageGenerator(asset: asset)
        generator.appliesPreferredTrackTransform = true
        generator.requestedTimeToleranceBefore = .zero
        generator.requestedTimeToleranceAfter = .zero
        generator.maximumSize = videoSize // ‚úÖ –ú–∞—Å—à—Ç–∞–±—É—î–º–æ GIF –¥–æ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–¥–µ–æ

        guard let destination = CGImageDestinationCreateWithURL(tempGifURL as CFURL, UTType.gif.identifier as CFString, totalFrames, nil) else {
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ GIF —Ñ–∞–π–ª")
            return
        }

        let gifProperties = [
            kCGImagePropertyGIFDictionary: [
                kCGImagePropertyGIFLoopCount: 0 // üîÑ –ë–µ–∑–∫—ñ–Ω–µ—á–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è
            ]
        ] as CFDictionary
        CGImageDestinationSetProperties(destination, gifProperties)

        let frameProperties = [
            kCGImagePropertyGIFDictionary: [
                kCGImagePropertyGIFDelayTime: max(0.03, 1.0 / 20.0) // üõ† –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–∞–¥—Ä–∞–º–∏
            ]
        ] as CFDictionary

        let dispatchGroup = DispatchGroup()
        var framesProcessed = 0

        print("üì∏ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É \(totalFrames) –∫–∞–¥—Ä—ñ–≤...")

        for timeValue in timeValues {
            dispatchGroup.enter()

            generator.generateCGImagesAsynchronously(forTimes: [timeValue]) { (requestedTime, resultingImage, actualTime, result, error) in
                defer { dispatchGroup.leave() }

                if let error = error {
                    print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–∞–¥—Ä—É –¥–ª—è \(requestedTime.seconds) —Å–µ–∫: \(error.localizedDescription)")
                    return
                }

                guard let resultingImage = resultingImage else {
                    print("‚ö†Ô∏è –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —á–∞—Å—É \(requestedTime.seconds) —Å–µ–∫")
                    return
                }

                DispatchQueue.global(qos: .userInitiated).async {
                    CGImageDestinationAddImage(destination, resultingImage, frameProperties)
                    DispatchQueue.main.async {
                        framesProcessed += 1
                        print("üì∏ –î–æ–¥–∞–Ω–æ –∫–∞–¥—Ä \(framesProcessed)/\(totalFrames)")
                    }
                }
            }
        }

        dispatchGroup.notify(queue: .main) {
            if framesProcessed == 0 {
                print("‚ùå –£ GIF –Ω–µ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä—É!")
                return
            }

            print("üé• –ì–æ—Ç–æ–≤–æ! GIF —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ö–∞–¥—Ä—ñ–≤: \(framesProcessed)/\(totalFrames)")
            CGImageDestinationFinalize(destination)

            DispatchQueue.main.async {
                self.gifURL = tempGifURL
                self.showLoader = false
                self.isProcessing = false
            }
        }
    }
}
