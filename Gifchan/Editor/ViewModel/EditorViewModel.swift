//
//  EditorViewModel.swift
//  Gifchan
//
//  Created by Ivan Kisilov on 07.03.2025.
//

import SwiftUI
import AVFoundation
import MobileCoreServices
import ImageIO
import UniformTypeIdentifiers

class EditorViewModel: ObservableObject {
    @Published var selectedFileURL: URL? {
        didSet {
            print("‚úÖ EditorViewModel: –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–µ–æ - \(selectedFileURL?.absoluteString ?? "nil")")
            if selectedFileURL != nil {
                convertVideoToGif()
            }
        }
    }
    @Published var gifURL: URL? {
        didSet {
            print("üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ gifURL: \(gifURL?.absoluteString ?? "nil")")
        }
    }
    @Published var showLoader = false

    func convertVideoToGif() {
        guard let videoURL = selectedFileURL else {
            print("‚ùå –ù–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–æ–≥–æ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—É")
            return
        }
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é GIF –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –Ω–æ–≤–æ—ó
        if let existingGifURL = gifURL {
            do {
                try FileManager.default.removeItem(at: existingGifURL)
                print("üóë –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é GIF: \(existingGifURL)")
            } catch {
                print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó GIF: \(error)")
            }
        }
        
        // –û—á–∏—â–∞—î–º–æ gifURL, —â–æ–± –∑–º—É—Å–∏—Ç–∏ UI –æ–Ω–æ–≤–∏—Ç–∏—Å—è
        DispatchQueue.main.async {
            self.gifURL = nil
        }
        
        showLoader = true
        print("‚ÑπÔ∏è –ü–æ—á–∞—Ç–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ —É GIF")
        
        let asset = AVURLAsset(url: videoURL)
        let generator = AVAssetImageGenerator(asset: asset)
        generator.appliesPreferredTrackTransform = true
        generator.requestedTimeToleranceBefore = .zero
        generator.requestedTimeToleranceAfter = .zero
        
        if let videoTrack = asset.tracks(withMediaType: .video).first {
            let videoSize = videoTrack.naturalSize
            if videoSize.width > 0 && videoSize.height > 0 {
                let maxSize: CGFloat = 500 // –ó–±—ñ–ª—å—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ
                let aspectRatio = videoSize.width / videoSize.height
                
                let newSize: CGSize
                if videoSize.width > videoSize.height {
                    newSize = CGSize(width: maxSize, height: maxSize / aspectRatio)
                } else {
                    newSize = CGSize(width: maxSize * aspectRatio, height: maxSize)
                }
                
                generator.maximumSize = newSize
                print("‚ÑπÔ∏è –†–æ–∑–º—ñ—Ä GIF –ø—ñ—Å–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó: \(newSize.width)x\(newSize.height)")
            } else {
                print("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –≤—ñ–¥–µ–æ")
            }
        } else {
            print("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –í—ñ–¥–µ–æ—Ç—Ä–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        }
        
        let frameRate: Int = 20 // –ó–±—ñ–ª—å—à–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–¥—Ä—ñ–≤ –∑–∞ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
        let duration = CMTimeGetSeconds(asset.duration)
        let totalFrames = Int(duration * Double(frameRate))
        let delayBetweenFrames: TimeInterval = 1.0 / Double(frameRate)
        
        print("‚ÑπÔ∏è –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ: \(duration) —Å–µ–∫—É–Ω–¥")
        print("‚ÑπÔ∏è –û—á—ñ–∫—É–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–¥—Ä—ñ–≤: \(totalFrames)")
        
        var timeValues: [NSValue] = []
        for frameNumber in 0..<totalFrames {
            let seconds = TimeInterval(frameNumber) * delayBetweenFrames
            let time = CMTime(seconds: seconds, preferredTimescale: Int32(NSEC_PER_SEC))
            timeValues.append(NSValue(time: time))
        }
        
        let gifFilename = "converted.gif"
        let gifURL = FileManager.default.temporaryDirectory.appendingPathComponent(gifFilename)
        
        guard let destination = CGImageDestinationCreateWithURL(gifURL as CFURL, UTType.gif.identifier as CFString, totalFrames, nil) else {
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è CGImageDestination")
            showLoader = false
            return
        }
        
        let fileProperties: [String: Any] = [
            kCGImagePropertyGIFDictionary as String: [
                kCGImagePropertyGIFLoopCount as String: 0
            ]
        ]
        CGImageDestinationSetProperties(destination, fileProperties as CFDictionary)
        print("‚ÑπÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ GIF")
        
        let frameProperties: [String: Any] = [
            kCGImagePropertyGIFDictionary as String: [
                kCGImagePropertyGIFDelayTime: delayBetweenFrames
            ]
        ]
        
        print("‚ÑπÔ∏è –ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–¥—Ä—ñ–≤ GIF")
        var addedFrames = 0
        
        generator.generateCGImagesAsynchronously(forTimes: timeValues) { (requestedTime, image, actualTime, result, error) in
            if let error = error {
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–¥—Ä—É –Ω–∞ \(requestedTime.seconds) —Å: \(error.localizedDescription)")
                return
            }
            
            guard let image = image else {
                print("‚ùå –û—Ç—Ä–∏–º–∞–Ω–∏–π –∫–∞–¥—Ä —î nil –Ω–∞ \(requestedTime.seconds) —Å")
                return
            }
            
            CGImageDestinationAddImage(destination, image, frameProperties as CFDictionary)
            addedFrames += 1
            print("‚úÖ –î–æ–¥–∞–Ω–æ –∫–∞–¥—Ä —É GIF (\(addedFrames)/\(totalFrames))")
            
            if addedFrames == totalFrames {
                print("‚ÑπÔ∏è –í—Å—ñ –∫–∞–¥—Ä–∏ –¥–æ–¥–∞–Ω—ñ, —Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è GIF")
                let success = CGImageDestinationFinalize(destination)
                DispatchQueue.main.async {
                    self.showLoader = false
                    if success {
                        self.gifURL = gifURL
                        print("‚úÖ GIF —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: \(gifURL)")
                    } else {
                        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è GIF")
                    }
                }
            }
        }
    }
}
